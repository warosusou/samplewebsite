{"version":3,"sources":["main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Main","id","App","className","src","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","ReactDOM","render","document","getElementById"],"mappings":"uPAgBeA,G,gBAbQ,WACrB,OACE,yBAAKC,GAAG,QACN,yBAAKA,GAAG,UACJ,4BACI,6BACA,6BACA,6BACA,iCCmDCC,EA1DO,WACpB,OACE,yBAAKC,UAAU,OACb,gCACE,yBAAKF,GAAG,QACN,yBAAKA,GAAG,QACN,yBAAKA,GAAG,UAAUG,IAAI,oBACtB,6BAEF,yBAAKH,GAAG,SACN,yBAAKG,IAAI,yBACT,wDAEF,yBAAKH,GAAG,QACN,yBAAKG,IAAI,yBACT,wDAEF,yBAAKH,GAAG,SACN,8BACA,wDAEF,yBAAKA,GAAG,eACN,yBAAKG,IAAI,yBACT,wDAEF,yBAAKH,GAAG,YACN,yBAAKG,IAAI,yBACT,wDAEF,yBAAKH,GAAG,SACN,yBAAKG,IAAI,yBACT,mDAGJ,yBAAKH,GAAG,UACN,yBAAKA,GAAG,OACN,yBAAKG,IAAI,yBACT,mCAEF,yBAAKH,GAAG,UACN,yBAAKG,IAAI,yBACT,wDAEF,yBAAKH,GAAG,WACN,yBAAKG,IAAI,yBACT,oEAEF,yBAAKH,GAAG,QACN,yBAAKG,IAAI,yBACT,0DAIN,kBAAC,EAAD,QC7CcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAuHA,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,eC/HnBC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,a","file":"static/js/main.1dea67e1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./main.css\";\r\n\r\nconst Main: React.FC = () => {\r\n  return (\r\n    <div id=\"main\">\r\n      <div id=\"large\" />\r\n          <ul >\r\n              <li/>\r\n              <li />\r\n              <li />\r\n              <li/>\r\n        </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default Main;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Main from \"./main\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <div id=\"Left\">\r\n          <div id=\"logo\">\r\n            <img id=\"logoimg\" src=\"./images/pm.png\" />\r\n            <p></p>\r\n          </div>\r\n          <div id=\"begin\">\r\n            <img src=\"./images/illust4.png\" />\r\n            <p>はじめに</p>\r\n          </div>\r\n          <div id=\"menu\">\r\n            <img src=\"./images/illust6.png\" />\r\n            <p>講座一覧</p>\r\n          </div>\r\n          <div id=\"apply\">\r\n            <img />\r\n            <p>お申込み</p>\r\n          </div>\r\n          <div id=\"teacherinfo\">\r\n            <img src=\"./images/illust4.png\" />\r\n            <p>講師情報</p>\r\n          </div>\r\n          <div id=\"textbook\">\r\n            <img src=\"./images/illust6.png\" />\r\n            <p>教科書評</p>\r\n          </div>\r\n          <div id=\"qanda\">\r\n            <img src=\"./images/illust4.png\" />\r\n            <p>ご要望</p>\r\n          </div>\r\n        </div>\r\n        <div id=\"Center\">\r\n          <div id=\"faq\">\r\n            <img src=\"./images/illust4.png\" />\r\n            <p>FAQ</p>\r\n          </div>\r\n          <div id=\"access\">\r\n            <img src=\"./images/illust6.png\" />\r\n            <p>アクセス</p>\r\n          </div>\r\n          <div id=\"contact\">\r\n            <img src=\"./images/illust4.png\" />\r\n            <p>お問い合わせ</p>\r\n          </div>\r\n          <div id=\"hire\">\r\n            <img src=\"./images/illust6.png\" />\r\n            <p>採用情報</p>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      <Main/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\nReactDOM.render(<App/>,document.getElementById('header'));"],"sourceRoot":""}